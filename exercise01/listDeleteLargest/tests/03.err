==1144873== Memcheck, a memory error detector
==1144873== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1144873== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==1144873== Command: ./testListDeleteLargest
==1144873== 
==1144873== Invalid write of size 8
==1144873==    at 0x109403: deleteMax (listDeleteLargest.c:30)
==1144873==    by 0x1093AE: listDeleteLargest (listDeleteLargest.c:17)
==1144873==    by 0x109253: main (testListDeleteLargest.c:19)
==1144873==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1144873== 
==1144873== 
==1144873== Process terminating with default action of signal 11 (SIGSEGV)
==1144873==  Access not within mapped region at address 0x8
==1144873==    at 0x109403: deleteMax (listDeleteLargest.c:30)
==1144873==    by 0x1093AE: listDeleteLargest (listDeleteLargest.c:17)
==1144873==    by 0x109253: main (testListDeleteLargest.c:19)
==1144873==  If you believe this happened as a result of a stack
==1144873==  overflow in your program's main thread (unlikely but
==1144873==  possible), you can try to increase the size of the
==1144873==  main thread stack using the --main-stacksize= flag.
==1144873==  The main thread stack size used in this run was 8388608.
==1144873== 
==1144873== HEAP SUMMARY:
==1144873==     in use at exit: 8,408 bytes in 10 blocks
==1144873==   total heap usage: 11 allocs, 1 frees, 8,421 bytes allocated
==1144873== 
==1144873== LEAK SUMMARY:
==1144873==    definitely lost: 0 bytes in 0 blocks
==1144873==    indirectly lost: 0 bytes in 0 blocks
==1144873==      possibly lost: 0 bytes in 0 blocks
==1144873==    still reachable: 8,408 bytes in 10 blocks
==1144873==         suppressed: 0 bytes in 0 blocks
==1144873== Rerun with --leak-check=full to see details of leaked memory
==1144873== 
==1144873== For lists of detected and suppressed errors, rerun with: -s
==1144873== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault
